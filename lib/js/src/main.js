// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Future = require("reason-future/lib/js/src/Future.bs.js");
var FutureJs = require("reason-future/lib/js/src/FutureJs.bs.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function randomlyFailedPromise(param) {
  var random = Math.random();
  return new Promise((function (resolve, param) {
                return resolve(random > 0.5 ? /* Error */Block.__(1, [/* NumberToHigh */-756308410]) : /* Ok */Block.__(0, [random]));
              }));
}

function addTwo(a) {
  return a + 2;
}

function checkIfNumberIsBiggerThanTwoPointSeven(a) {
  if (a > 2.7) {
    return /* Ok */Block.__(0, [a]);
  } else {
    return /* Error */Block.__(1, [/* NumberToLow */-3191248]);
  }
}

function logNumber(a) {
  console.log(a);
  return /* () */0;
}

function multiplyByFour(a) {
  return a * 4;
}

var NumberToHigh = Caml_exceptions.create("Main.WithPromise.NumberToHigh");

var NumberToLow = Caml_exceptions.create("Main.WithPromise.NumberToLow");

function main(param) {
  return randomlyFailedPromise(/* () */0).then((function (maybeNumberResult) {
                            if (maybeNumberResult.tag) {
                              return Promise.reject(NumberToHigh);
                            } else {
                              return Promise.resolve(maybeNumberResult[0]);
                            }
                          })).then((function (number) {
                          return Promise.resolve(number + 2);
                        })).then((function (number) {
                        return Promise.resolve(checkIfNumberIsBiggerThanTwoPointSeven(number));
                      })).then((function (maybeNumberResult) {
                      if (maybeNumberResult.tag) {
                        console.log("No number present here :(");
                      } else {
                        console.log(maybeNumberResult[0]);
                      }
                      return Promise.resolve(maybeNumberResult);
                    })).then((function (maybeNumberResult) {
                    if (maybeNumberResult.tag) {
                      return Promise.reject(NumberToLow);
                    } else {
                      return Promise.resolve(maybeNumberResult[0] * 4);
                    }
                  })).then((function (number) {
                  return Promise.resolve((console.log("final number is" + number.toString()), /* () */0));
                })).catch((function (param) {
                return Promise.resolve((console.log("We had an error, but we can't really do much about it"), /* () */0));
              }));
}

var WithPromise = /* module */[
  /* NumberToHigh */NumberToHigh,
  /* NumberToLow */NumberToLow,
  /* main */main
];

function main$1(param) {
  return Future.get(Future.mapOk(Future.tapOk(Future.flatMapOk(Future.mapOk(Future.flatMapOk(FutureJs.fromPromise(randomlyFailedPromise(/* () */0), (function (param) {
                                        return /* `UnknownError */[
                                                -638627842,
                                                "Promise failed initially"
                                              ];
                                      })), Future.value), addTwo), (function (num) {
                            return Future.value(checkIfNumberIsBiggerThanTwoPointSeven(num));
                          })), logNumber), multiplyByFour), (function (finalResult) {
                if (finalResult.tag) {
                  var match = finalResult[0];
                  if (typeof match === "number") {
                    if (match >= -3191248) {
                      console.log("Number was to low");
                      return /* () */0;
                    } else {
                      console.log("Number was to high");
                      return /* () */0;
                    }
                  } else {
                    console.log("Unknown error " + match[1]);
                    return /* () */0;
                  }
                } else {
                  console.log("final number is" + finalResult[0].toString());
                  return /* () */0;
                }
              }));
}

var WithFutures = /* module */[/* main */main$1];

function let_(value, fn) {
  return value.then((function (value) {
                return Promise.resolve(Curry._1(fn, value));
              }));
}

var $$Promise$1 = /* module */[/* let_ */let_];

function let_$1(value, fn) {
  if (value.tag) {
    return value;
  } else {
    return Curry._1(fn, value[0]);
  }
}

var Result = /* module */[
  /* getExn */Belt_Result.getExn,
  /* mapWithDefaultU */Belt_Result.mapWithDefaultU,
  /* mapWithDefault */Belt_Result.mapWithDefault,
  /* mapU */Belt_Result.mapU,
  /* map */Belt_Result.map,
  /* flatMapU */Belt_Result.flatMapU,
  /* flatMap */Belt_Result.flatMap,
  /* getWithDefault */Belt_Result.getWithDefault,
  /* isOk */Belt_Result.isOk,
  /* isError */Belt_Result.isError,
  /* eqU */Belt_Result.eqU,
  /* eq */Belt_Result.eq,
  /* cmpU */Belt_Result.cmpU,
  /* cmp */Belt_Result.cmp,
  /* let_ */let_$1
];

function main$2(param) {
  return let_(randomlyFailedPromise(/* () */0), (function (maybeResult) {
                return let_$1(maybeResult, (function (maybeValue) {
                              var twoAdded = maybeValue + 2;
                              return let_$1(checkIfNumberIsBiggerThanTwoPointSeven(twoAdded), (function (maybeBigNumber) {
                                            var multipliedByFour = maybeBigNumber * 4;
                                            console.log(multipliedByFour);
                                            return /* Ok */Block.__(0, [multipliedByFour]);
                                          }));
                            }));
              }));
}

var WithLetAnything = /* module */[
  /* Promise */$$Promise$1,
  /* Result */Result,
  /* main */main$2
];

exports.randomlyFailedPromise = randomlyFailedPromise;
exports.addTwo = addTwo;
exports.checkIfNumberIsBiggerThanTwoPointSeven = checkIfNumberIsBiggerThanTwoPointSeven;
exports.logNumber = logNumber;
exports.multiplyByFour = multiplyByFour;
exports.WithPromise = WithPromise;
exports.WithFutures = WithFutures;
exports.WithLetAnything = WithLetAnything;
/* No side effect */
